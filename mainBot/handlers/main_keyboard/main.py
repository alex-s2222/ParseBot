from telegram.ext import (
    ContextTypes,
)

from telegram import (
    Update,
    ReplyKeyboardMarkup,
)

from loguru import logger
from datetime import datetime, timedelta

from model.data import DB
from .view import MENUKEYBOARD


markup = ReplyKeyboardMarkup(MENUKEYBOARD, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/start message from user and output keyboard"""
    user_id = update.message.from_user.id

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not DB.check_user_from_db(user_id=user_id):
        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º –¥–Ω–µ–º
        now = datetime.now()
        end = now + timedelta(hours=24)
    
        DB.insert_default_user(user_id=user_id, date_now=now, date_end=end)
        logger.log('USER', f'User:{user_id} add DB')

        await update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ \n<<MyParseAvito>> \n\n–í–∞–º –¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –¥–µ–Ω—å',
        reply_markup=markup)

        out_message = __create_message()
        await update.message.reply_text(out_message)
        
    #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö    
    else:
        await update.message.reply_text(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ \n<<MyParseAvito>>',
            reply_markup=markup,
        )


async def account(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–∫–∫–∞—É–Ω—Ç–µ"""
    user_id = update.message.from_user.id

    active_urls = len(DB.get_urls(user_id=user_id))
    end_subs = DB.get_user_subsctription(user_id=user_id).date()

    answer_message = f"–í–∞—à ID: {user_id}\n"+\
                        f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–æ: {end_subs.day}.{end_subs.month}.{end_subs.year}\n" +\
                         f"–ö–æ–ª–∏—á–µ—Å—Ç–Ω–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {active_urls}"
    
    logger.log('USER', f'User:{user_id} check info account')
    
    await update.message.reply_text(answer_message)


async def support(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    out_message = __create_message()

    await update.message.reply_text(out_message)


def __create_message() -> str:
    MY_ACCOUNT = '@Juzorai'
    BOT_ACCOUNT = '@My_parse_avito_bot'
    GROUP_ACCOUNT = 'https://t.me/+Sj_NseMkPHU5NDAy'

    out_message =  f'–ù–æ–≤–æ—Å—Ç–∏, —É–ª—É—á—à–µ–Ω–∏—è, –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –ø–µ—Ä–µ—Ä—ã–≤—ã \nüëâ{GROUP_ACCOUNT}\n\n' +\
                    f'–ë–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π \nüëâ{BOT_ACCOUNT}\n\n' +\
                     f'–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∏–ª–∏ –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–∏—à–∏—Ç–µ \nüëâ{MY_ACCOUNT}'
    
    return out_message
