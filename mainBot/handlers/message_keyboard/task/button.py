from telegram.ext import (
    ConversationHandler,
    filters,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
)

from telegram import (
    InlineKeyboardMarkup,
    Update,
)

from loguru import logger

from model.data import DB
from .. import view

START_ROUTES, CHECK_INPUT_URL, INPUT_TITLE_FROM_URL, DELETE, BACK = range(5)


async def __tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä –ó–∞–¥–∞—á–∏"""
    user_id = update.message.from_user.id
    markup = InlineKeyboardMarkup(view.task_keyboard)
    await update.message.reply_markdown_v2(text='–ü–µ—Ä–µ—Ö–æ–¥ –≤ –ó–∞–¥–∞—á–∏', reply_markup=view.back_menu)
    await update.message.reply_text("–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=markup)

    logger.log("USER", f"User: {user_id} pressed to tasks")

    return START_ROUTES


# TODO —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
async def __create_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É, –≤—ã–≤–æ–¥–∏–º –∫–Ω–æ–∞–∫—É –Ω–∞–∑–∞–¥ """
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    reply_markup = InlineKeyboardMarkup(view.back_button)

    await query.edit_message_text(
        text="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ avito", reply_markup=reply_markup
    )

    logger.log('USER', f'User {user_id} press input url')

    return CHECK_INPUT_URL


async def __back_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤—ã–≤–æ–¥–∏–º –≥–ª–∞–≤–Ω—É—é –≥–ª–∞–≤–∏–∞—Ç—É—Ä—É """
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id

    reply_markup = InlineKeyboardMarkup(view.task_keyboard)

    await query.edit_message_text(text="–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é", reply_markup=reply_markup)

    logger.log('USER', f'User: {user_id} press back button')

    return START_ROUTES


async def __insert_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤–∏—Ç–æ –∏ –≤—ã–≤–æ–¥–∏–º –≤–≤–æ–¥ title"""
    user_id = update.message.from_user.id
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º url –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞–ª–µ–ª—è —á—Ç–æ –±—ã —Å–¥–µ–ª–∞—Ç—å title
    url = update.message.text
    user_data = context.user_data
    user_data['url'] = url

    await update.message.reply_text(text="–≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏")

    logger.log('USER', f'User: {user_id} input title for url')

    return INPUT_TITLE_FROM_URL


async def __input_title_from_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ø–æ–ª—É—á–∞–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö url –∏ title"""
    user_id = update.message.from_user.id
    title = update.message.text
    user_data = context.user_data
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∏–º–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if DB.check_user_titles(user_id=user_id, user_title=title):
        await update.message.reply_text(f'–ó–∞–¥–∞—á–∞ —Å —Ç–∞–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
        return INPUT_TITLE_FROM_URL

    DB.insert_user_url_and_title(user_id=user_id, user_url=user_data['url'], user_title=title)

    user_data.clear()

    logger.log('USER', f'User {user_id} insert url and title in DB')

    await update.message.reply_text(f"—Å—Å—ã–ª–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã", reply_markup=view.main_keyboard)
    return ConversationHandler.END


async def __check_insert_url(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ avito"""
    reply_markup = InlineKeyboardMarkup(view.back_button)
    await update.message.reply_text(f"–û—à–∏–±–∫–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤–∏—Ç–æ", reply_markup=reply_markup)

    return CHECK_INPUT_URL


async def __delete_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.callback_query.from_user.id
    query = update.callback_query

    await query.answer()

    urls = DB.get_urls(user_id=user_id)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not urls:
        reply_markup = InlineKeyboardMarkup(view.back_button)
        await query.edit_message_text(text="–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç", reply_markup=reply_markup)
        return BACK

    titles = [url['title'] for url in urls]
    reply_markup = InlineKeyboardMarkup(
        view.create_title_button(titles=titles))

    logger.log('USER', f'User {user_id} view task for delete')

    await query.edit_message_text(f"–≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É", reply_markup=reply_markup)
    return DELETE


async def __delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –∏ —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
    query = update.callback_query
    await query.answer()
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    title_id = int(query.data)
    user_id = query.from_user.id

    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    urls = DB.get_urls(user_id=user_id)
    title = urls[title_id]['title']

    # —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑–∑—ã –¥–∞–Ω–Ω—ã—Ö
    DB.delete_url_by_title(user_id=user_id, title=title)

    # —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –∫ –∑–∞–¥–∞—á–∞–º
    reply_markup = InlineKeyboardMarkup(view.back_button)

    logger.log('USER', f'User {user_id} delete task')

    await query.message.edit_text(f'–∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–Ω–∞', reply_markup=reply_markup)
    return BACK


async def __information_about_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≤—ã–≤–æ–¥–∏—Ç –∑–∞–¥–∞—á–∏ –∏ –∏—Ö –Ω–∞–∑–∞–≤–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_id = update.callback_query.from_user.id
    query = update.callback_query
    await query.answer()

    # –ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ urls
    urls = DB.get_urls(user_id=user_id)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not urls:
        back_button = InlineKeyboardMarkup(view.back_button)
        await query.edit_message_text(text="–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç", reply_markup=back_button)
        return BACK

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    output_message = ''
    for url in urls:
        output_message += '\t________' + \
            url['title'] + '________\n' + url['user_url'] + '\n\n'

    back_button = InlineKeyboardMarkup(view.back_button)

    logger.log('USER', f'User {user_id}  view information about tasks')

    await query.message.edit_text(f"{output_message}", reply_markup=back_button)

    return BACK


async def __back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≤—ã–≤–æ–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥"""
    user_id = update.message.from_user.id

    # –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    context.user_data.clear()

    await update.message.reply_text(text='–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=view.main_keyboard)

    logger.log('USER', f'User {user_id} back to main menu')

    return ConversationHandler.END


def tasks() -> ConversationHandler:
    ONE, TWO, THREE = range(3)

    task_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üóÉ–ó–∞–¥–∞—á–∏$"), __tasks)],
        states={
            START_ROUTES: [
                CallbackQueryHandler(
                    __create_task, pattern="^" + str(ONE) + "$"),
                CallbackQueryHandler(
                    __delete_menu, pattern="^" + str(TWO) + "$"),
                CallbackQueryHandler(
                    __information_about_task, pattern="^" + str(THREE) + "$"),
            ],
            CHECK_INPUT_URL: [
                CallbackQueryHandler(
                    __back_task, pattern="^" + str(ONE) + "$"),
                    
                #TODO |^(https://m.avito.ru) 
                MessageHandler(filters.Regex("^(https://www.avito.ru/)"), __insert_url),
                MessageHandler(filters.TEXT, __check_insert_url)
            ],
            INPUT_TITLE_FROM_URL: [
                MessageHandler(filters.TEXT, __input_title_from_user)
            ],
            DELETE: [
                CallbackQueryHandler(__delete),
            ],
            BACK: [
                CallbackQueryHandler(
                    __back_task, pattern="^" + str(ONE) + "$"),
            ]

        },
        fallbacks=[MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), __back_to_main_menu),
                   ],
    )
    return task_handler
